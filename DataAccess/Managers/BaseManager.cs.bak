using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using PortableCommon.Models;
using PortableCommon.Services.Interfaces;

namespace DataAccess.Managers
{
    public class BaseManager<T> : IServiceBase<T> where T : IModel
    {
        protected string ModelName
        {
            get;
            set;
        }
    
        public BaseManager()
        {
            ItemsList = new Collection<T>();
        }

        public Collection<T> ItemsList { get; private set; }

        /// <summary>
        /// Recopie du model dans un autre (hors Id)
        /// </summary>
        /// <param name="modelDst"></param>
        /// <param name="modelSrc"></param>
        public virtual void CopyTo(T modelDst, T modelSrc) 
        {
            throw new NotImplementedException(ModelName + " : CopyTo not implemented");
        }

        public virtual void LoadItems()
        {
            System.Diagnostics.Debug.WriteLine("Loading " + ModelName + "...");
            ItemsList.Clear();
            //ISession session = HibernateTools
            var session = HibernateTools.Instance.Session;

            var tx = session.BeginTransaction();

            var models = session.CreateQuery("from " + ModelName).List<T>();
            tx.Commit();

            foreach (var model in models)
            {
                ItemsList.Add(model);
            }
            System.Diagnostics.Debug.WriteLine("{0} loaded ({1} items)",ModelName, models.Count);
        }

        //public event EventHandler ItemsCreated;

        /// <summary>
        /// Suppression d'un item
        /// </summary>
        /// <param name="itemId"></param>
        public virtual void DeleteItem(int itemId)
        {
            System.Diagnostics.Debug.WriteLine("Deleting {0} {1} ...", ModelName, itemId);

            var session = HibernateTools.Instance.Session;

            var tx = session.BeginTransaction();
            var model = session.Get<T>(itemId);
            if (model != null)
                session.Delete(model);
            tx.Commit();
        }

        /// <summary>
        /// Création d'un item
        /// </summary>
        /// <param name="model"></param>
        public virtual T CreateItem(T model)
        {
            System.Diagnostics.Debug.WriteLine("Creating {0} {1} ...", ModelName, model.Id);

            var session = HibernateTools.Instance.Session;

            var tx = session.BeginTransaction();

            model.CreatedAt = DateTime.Now;
            model.UpdatedAt = DateTime.Now;
            var saved = session.Save(model);
            tx.Commit();
            model.Id = (int)saved;
            return model;
        }

        /// <summary>
        /// Mise à jour d'un item
        /// </summary>
        /// <param name="model"></param>
        public virtual void UpdateItem(T model)
        {
            System.Diagnostics.Debug.WriteLine("Updating {0} {1} ...", ModelName, model.Id);

            var session = HibernateTools.Instance.Session;

            var tx = session.BeginTransaction();
            var data = session.Get<T>(model.Id);
            if (data != null)
            {
                CopyTo(data, model);
                data.UpdatedAt = DateTime.Now;
                session.Update(data);
            }

            tx.Commit();
        }

        public virtual void CreateItems(IEnumerable<T> list)
        {
            throw new NotImplementedException();
        }
    }
}
